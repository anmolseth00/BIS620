xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE,
facet.by = "Group",
risk.table.title = "Risk Table by Genotype & Treatment",
pval = TRUE
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE,
facets = list(facets(
Genotype ~ ATRT,
scales = "free_y"
)),
pval = TRUE
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE,
facet.grid = ~ Genotype + ATRT,
pval = TRUE
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE,
#facet.grid = ~ Genotype + ATRT,
pval = TRUE
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
surv_obj <- Surv(d$DTHDY, d$DTH)
# Perform pairwise log-rank tests
pairwise_results <- pairwise_survdiff(
formula = surv_obj ~ Genotype + ATRT,
data = d
)
library(survminer)
# Combine Genotype and ATRT as a single factor variable
d$Group <- interaction(d$Genotype, d$ATRT)
# Create a survival object
surv_obj <- Surv(d$DTHDY, d$DTH)
# Perform pairwise log-rank tests
pairwise_results <- pairwise_survdiff(
formula = surv_obj ~ Group,
data = d
)
?pairwise_survdiff
# Create a survival object
surv_obj <- Surv(d$DTHDY, d$DTH)
# Perform pairwise log-rank tests
pairwise_results <- pairwise_survdiff(
formula = surv_obj ~ ATRT,
data = d
)
# View the p-values for all pairwise comparisons
print(pairwise_results)
# Create a survival object
surv_obj <- Surv(d$DTHDY, d$DTH)
# Perform pairwise log-rank tests
pairwise_results <- pairwise_survdiff(
formula = surv_obj ~ Genotype,
data = d
)
# View the p-values for all pairwise comparisons
print(pairwise_results)
# Create a survival object
surv_obj <- Surv(d$DTHDY, d$DTH)
# Perform pairwise log-rank tests
pairwise_results <- pairwise_survdiff(
formula = surv_obj ~ Genotype + ATRT,
data = d
)
# Print summary of the model
kable(summary(cox_model))
library(haven)
library(purrr)
library(dplyr)
library(ggplot2)
library(viridis)
library(knitr)
library(survival)
library(survminer)
trial_path = file.path("..", "Homework 2", "NCT00364013")
trial_files = list.files(trial_path, pattern = "*_pds2019.sas7bdat")
dl = map(file.path(trial_path, trial_files), ~ read_sas(.x))
names(dl) = gsub("*_pds2019.sas7bdat", "", trial_files)
adae = dl$adae #contains severity code
adsl = dl$adsl #contains ATRT (actual treatment)
adrsp = dl$adrsp #contains confirmed responses
biomark = dl$biomark #contains biomarkers
kable(as.data.frame(table(adae$AESEVCD)),
caption = "Frequency Count of Severity Codes",
col.names = c("Grade/Severity Code", "Frequency"))
filtered_adae <- adae %>%
filter(AESEVCD == 4)
cat("Total number of grade 4 toxicities recorded in the trial:", length(filtered_adae$SUBJID), "\n")
# Count the number of unique entries in SUBJID
unique_subjid_count <- filtered_adae %>%
distinct(SUBJID) %>%
nrow()
# Get the unique SUBJID entries
unique_subjid_entries <- filtered_adae %>%
distinct(SUBJID)
# Print the count and unique entries
cat("Number of unique entries in SUBJID:", unique_subjid_count, "\n")
cat("Unique SUBJID entries:", unique_subjid_entries$SUBJID, "\n")
# Combine filtered_adae with adsl to get Age, Sex, and ATRT for each patient
d = left_join(filtered_adae, adsl, by = "SUBJID")
unique_subjid_entries <- d %>%
distinct(SUBJID)
# Extract information for the unique SUBJID entries
unique_subjid_info <- d %>%
filter(SUBJID %in% unique_subjid_entries$SUBJID) %>%
select(SUBJID, AGE, SEX, ATRT) %>%
distinct()
print(unique_subjid_info)
adrsp |> distinct(RSRESP)
confirmed_responses |> distinct(RSRESP) # <- OH Notes: use this
confirmed_responses <- adrsp |>
adrsp$RSCONFYN == "Y"
confirmed_responses <- adrsp |>
filter(RSCONFYN == "Y")
confirmed_responses |> distinct(RSRESP) # <- OH Notes: use this
adrsp |> distinct(RSRESP)
adrsp |> distinct(RSRESP)
confirmed_responses <- adrsp |>
filter(RSCONFYN == "Y")
confirmed_responses |> distinct(RSRESP) # <- OH Notes: use this
# Custom ranking based on the question's guidelines
ranking <- c("Complete response", "Partial response", "Stable disease", "Progressive disease")
results_df <- data.frame(SUBJID = character(0), RSRESP = character(0), RSCONFYN = character(0), stringsAsFactors = FALSE)
# Remove 'Unable to evaluate' and "" from the analysis
filtered_data <- subset(confirmed_responses, !(RSRESP == 'Unable to evaluate' | RSRESP == ''))
# Iterate through unique SUBJIDs
unique_subjids <- unique(filtered_data$SUBJID)
for (subj_id in unique_subjids) {
subset_df <- filtered_data[filtered_data$SUBJID == subj_id, ]
# Check if any RSRESP value matches the ranking
matching_values <- subset_df$RSRESP[subset_df$RSRESP %in% ranking]
# Find the highest ranking value
if (ranking[1] %in% matching_values) {
highest_rank_value <- ranking[1]
} else if (ranking[2] %in% matching_values) {
highest_rank_value <- ranking[2]
} else if (ranking[3] %in% matching_values) {
highest_rank_value <- ranking[3]
} else if (ranking[4] %in% matching_values) {
highest_rank_value <- ranking[4]
}
# Find the RSCONFYN value
if ('Y' %in% as.list(subset_df$RSCONFYN)) {
rsconfyn_value <- 'Y'
} else if ('N' %in% as.list(subset_df$RSCONFYN)) {
rsconfyn_value <- 'N'
} else{
rsconfyn_value <- ''
}
# Append the result to the results dataframe
results_df <- rbind(results_df, data.frame(SUBJID = subj_id, RSRESP = highest_rank_value, RSCONFYN = rsconfyn_value, stringsAsFactors = FALSE))
}
d = inner_join(adsl[, c("SUBJID", "ATRT")], results_df, by = "SUBJID")
head(d)
# Create a bar plot of the number of each type of best response, faceted by arm
response_plot <- ggplot(d, aes(x = factor(RSRESP, levels = c("Complete response", "Partial response", "Stable disease", "Progressive disease")), fill = RSRESP)) +
geom_bar() +
facet_wrap(~ ATRT, scales = "free") +
labs(title = "Best Response by Arm", x = "Best Response", y = "Count") +
theme_minimal() +
geom_text(aes(label = Count), vjust = -0.5)
# Show the plot
print(response_plot)
count_data <- d %>%
group_by(RSRESP, ATRT) %>%
summarize(Count = n())
# Create a bar plot of the number of each type of best response, faceted by arm
response_plot <- ggplot(count_data, aes(x = factor(RSRESP, levels = c("Complete response", "Partial response", "Stable disease", "Progressive disease")), y = Count, fill = RSRESP)) +
geom_bar() +
facet_wrap(~ ATRT, scales = "free") +
labs(title = "Best Response by Arm", x = "Best Response", y = "Count") +
theme_minimal() +
geom_text(aes(label = Count), vjust = -0.5)
# Show the plot
print(response_plot)
count_data <- d %>%
group_by(RSRESP, ATRT) %>%
summarize(Count = n())
# Create a bar plot of the number of each type of best response, faceted by arm
response_plot <- ggplot(count_data, aes(x = factor(RSRESP, levels = c("Complete response", "Partial response", "Stable disease", "Progressive disease")), y = Count, fill = RSRESP)) +
geom_bar(stat = "identity") +
facet_wrap(~ ATRT, scales = "free") +
labs(title = "Best Response by Arm", x = "Best Response", y = "Count") +
theme_minimal() +
geom_text(aes(label = Count), vjust = -0.5)
# Show the plot
print(response_plot)
# Calculate the number of patients with "Complete Response" or "Partial Response" per arm
positive_response_count <- d %>%
filter(RSRESP %in% c("Complete response", "Partial response")) %>%
group_by(ATRT) %>%
summarise(Patient_Count = n())
# Print the result
kable(positive_response_count)
kable(count_data)
complete_responses = adrsp |>
filter(RSRESP == 'Complete response')
confirmed_responses = adrsp |>
filter(RSCONFYN == 'Y')
# How many complete responses are confirmed?
cc_responses = adrsp |>
filter(RSRESP == 'Complete response') |>
filter(RSCONFYN == 'Y')
cat("There are ", nrow(complete_responses), "complete responses, and of those", nrow(complete_responses), ", only ", nrow(cc_responses), "are confirmed\n")
kable(head(cc_responses))
cc_unique <- cc_responses %>%
distinct(SUBJID)
cat("\nHowever, not all of these are unique since some subjects appear more than once. It's worth mentioning that there were only", nrow(cc_unique), "subjects who had complete, confirmed responses")
#Showing the same result another way to double check my answer:
confirmed_complete_response <- d %>%
filter(RSRESP == "Complete response" & RSCONFYN == "Y") %>%
nrow()
cat("Number of unique, confirmed+complete responses:", confirmed_complete_response, "\n")
?cat
filtered_biomark <- biomark %>%
select(c(1:7, 16:17))  # Selecting columns relevant to analysis
# Function to determine genotype
get_genotype <- function(subjid) {
sublist <- as.list(filtered_biomark[filtered_biomark$SUBJID == subjid, ][, c(3, 5, 7, 9)])
if ("Mutant" %in% sublist) {
return("Mutant")
} else if ((sum(sublist == "Wild-type") > sum(sublist == "Unknown")) & # | ?
(sum(sublist == "Wild-type") > sum(sublist == "Failure"))) {
return("Wild-type")
} else {
return("Unknown")
}
}
filtered_biomark$Genotype <- sapply(filtered_biomark$SUBJID, get_genotype)
summary_df <- as.data.frame(table(filtered_biomark$Genotype))
colnames(summary_df) <- c("Category", "Count")
kable(summary_df)
d = left_join(filtered_biomark,
adsl[, c("SUBJID", "ATRT", "DTH", "DTHDY")],
by = "SUBJID")
kable(d |>
group_by(Genotype, ATRT, DTH) |>
summarize(count = n()))
d %>%
filter(Genotype != "Unknown") %>%
group_by(ATRT, DTH) %>%
summarize(count = n()) |>
kable()
d |>
group_by(Genotype, DTH) |>
summarize(count = n())
library(haven)
library(purrr)
library(dplyr)
library(ggplot2)
library(knitr)
library(survival)
library(survminer)
trial_path = file.path("..", "Homework 2", "NCT00364013")
trial_files = list.files(trial_path, pattern = "*_pds2019.sas7bdat")
dl = map(file.path(trial_path, trial_files), ~ read_sas(.x))
names(dl) = gsub("*_pds2019.sas7bdat", "", trial_files)
adae = dl$adae #contains severity code
adsl = dl$adsl #contains ATRT (actual treatment)
adrsp = dl$adrsp #contains confirmed responses
biomark = dl$biomark #contains biomarkers
plot <- ggplot(summary_df, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "KRAS Mutation Status", x = "Category", y = "Count") +
theme_minimal()
print(plot)
# Calculate counts for each Category
count_data <- summary_df %>%
group_by(Category) %>%
summarize(Count = sum(Count))
# Create a bar plot of KRAS Mutation Status
plot <- ggplot(count_data, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "KRAS Mutation Status", x = "Category", y = "Count") +
theme_minimal() +
#scale_fill_viridis_d(option = "mako") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = Count), vjust = -0.5)
plot
summary_df
count_data
plot <- ggplot(summary_df, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "KRAS Mutation Status", x = "Category", y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = Count), vjust = -0.5)
print(plot)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
# Filtering out unknown genotypes since these are not informative for this analysis
d <- subset(d, Genotype != "Unknown")
# Turning Genotype into a factor variable
d$Genotype = factor(d$Genotype, ordered = FALSE)
# Setting Wild-type as the reference to compare against
d$Genotype = relevel(d$Genotype, ref = "Wild-type")
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
# Filtering out unknown genotypes since these are not informative for this analysis
d <- subset(d, Genotype != "Unknown")
# Turning Genotype into a factor variable
d$Genotype = factor(d$Genotype, ordered = FALSE)
# Setting Wild-type as the reference to compare against
d$Genotype = relevel(d$Genotype, ref = "Wild-type")
survival_plot + ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
survival_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
survival_plot +
guides(
color = guide_legend(
title = "Genotype & Treatment",
label = "Legend Label"
)
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype",
title = "Kaplan-Meier Survival Curve by Genotype",
xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE
)
# Perform a log-rank test
summary(coxph(Surv(d$DTHDY, d$DTH) ~ d$Genotype))
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype",
title = "Kaplan-Meier Survival Curve by Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
risk.table = TRUE
)
cox_model <- coxph(Surv(DTHDY, DTH) ~ ATRT, data = d)
# Print summary of the model
summary(cox_model)
summary(coxph(Surv(DTHDY, DTH) ~ Genotype * ATRT, data = d))
levels(d$ATRT)
d$ATRT
class(d$ATRT)
d$ATRT = factor(d$ATRT, ordered = FALSE)
d$ATRT = relevel(d$ATRT, ref = "FOLFOX alone")
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
levels(d$ATRT)
summary(coxph(Surv(DTHDY, DTH) ~ Genotype * ATRT, data = d))
cc_unique <- cc_responses %>%
distinct(SUBJID)
cat("\nHowever, not all of these are unique since
some subjects appear more than once. \n It's worth
mentioning that there were only", nrow(cc_unique),
"subjects who had complete, confirmed responses")
cc_unique <- cc_responses %>%
distinct(SUBJID)
cat("\nHowever, not all of these are unique since
some subjects appear more than once. \n\n
It's worth
mentioning that there were only", nrow(cc_unique),
"subjects who had complete, confirmed responses")
cc_unique <- cc_responses %>%
distinct(SUBJID)
cat("\nHowever, not all of these are unique since some subjects appear more than once.
It's worth mentioning that there were only", nrow(cc_unique), "subjects who had complete, confirmed responses")
cc_unique <- cc_responses %>%
distinct(SUBJID)
cat("\nHowever, not all of these are unique since some subjects appear more than once.
It's worth mentioning that there were only", nrow(cc_unique), "subjects who had complete, confirmed responses")
complete_responses = adrsp |>
filter(RSRESP == 'Complete response')
confirmed_responses = adrsp |>
filter(RSCONFYN == 'Y')
# How many complete responses are confirmed?
cc_responses = adrsp |>
filter(RSRESP == 'Complete response') |>
filter(RSCONFYN == 'Y')
cat("There are ", nrow(complete_responses), "complete responses, and of those", nrow(complete_responses), ", only ", nrow(cc_responses), "are confirmed\n")
ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE,
geom_hline(yintercept = 0.5, color = "red")
)
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
# Add a red horizontal line at y = 0.5
surv_plot + annotate("hline", yintercept = 0.5, color = "red", linetype = "solid")
# Add a red horizontal line at y = 0.5
surv_plot + geom_hline(yintercept = 0.5, color = "red")
surv_plot <- ggsurvplot(
survfit(Surv(DTHDY, DTH) ~ Genotype + ATRT, data = d),
data = d,
conf.int = TRUE,
legend.title = "Genotype & ATRT",
title = "Kaplan-Meier Survival Curve by Genotype & Treatment Arm",
xlab = "Time in Days",
ylab = "Survival Probability",
pval = TRUE
)
# Add a red horizontal line at y = 0.5
surv_plot$plot + geom_hline(yintercept = 0.5)
# Add a red horizontal line at y = 0.5
surv_plot$plot + geom_hline(yintercept = 0.5, col = 'red')
accel <- readRDS("~/Yale/Fall 2023/BIS 620/Lectures/2023-10-16/accel.rds")
accel
getcwd()
cwd()
setwd("~/Yale/Fall 2023/BIS 620/Homework/Midterm Project/ctquery")
test_dir("tests")
library(testthat)
test_dir("tests")
test_dir("tests")
